---
type Props = {
  input: string[];
};

const props = Astro.props;

type TokenKind =
  | "keyword"
  | "identifier"
  | "literal"
  | "operator"
  | "new-line"
  | "open-paren"
  | "close-paren"
  | "open-brace"
  | "close-brace"
  | "semi";

function getKind(token: string): TokenKind {
  switch (token) {
    case "fn":
      return "keyword";
    case "let":
      return "keyword";
    case "=":
      return "operator";
    case "(":
      return "open-paren";
    case ")":
      return "close-paren";
    case "{":
      return "open-brace";
    case "}":
      return "close-brace";
    case ";":
      return "semi";
    case "\n":
      return "new-line";
    default:
      if (!isNaN(Number(token))) return "literal";
      return "identifier";
  }
}

function getTextColor(kind: TokenKind): string {
  switch (kind) {
    case "keyword":
      return "text-blue-700";
    case "identifier":
      return "text-emerald-700";
    case "literal":
      return "text-red-700";
    case "operator":
      return "text-yellow-700";
    default:
      return "text-slate-500";
  }
}

function getBackgroundColor(kind: TokenKind): string {
  switch (kind) {
    case "keyword":
      return "bg-blue-700";
    case "identifier":
      return "bg-emerald-700";
    case "literal":
      return "bg-red-700";
    case "operator":
      return "bg-yellow-700";
    default:
      return "bg-slate-800";
  }
}

const rows: string[][] = [[]];

props.input.forEach((token) => {
  if (token === "\n") {
    rows.push([]);
  } else {
    rows[rows.length - 1].push(token);
  }
});
---

<div class="flex flex-col items-center rounded border border-[#24292e] bg-black">
  {
    rows.map((row, index) => {
      // TODO: This is a hack to get the indentation to work, it only works for 1-level block
      const indentLine = index !== 0 && index !== rows.length - 1;
      return (
        <ul class={`m-0 flex w-[500px] list-none space-x-1 ${indentLine ? "ml-24" : ""}`}>
          {row.map((token) => {
            const kind = getKind(token);
            return (
              <li>
                <div class={`${getTextColor(kind)}`}>{kind}</div>
                <div
                  class={`px-3 py-1 text-center text-lg ${getBackgroundColor(
                    kind,
                  )} inline-block rounded`}
                >
                  {token}
                </div>
              </li>
            );
          })}
        </ul>
      );
    })
  }
</div>
